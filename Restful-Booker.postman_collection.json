{
	"info": {
		"_postman_id": "528edb9b-d04b-4187-8f85-4f8bcfeb5061",
		"name": "Restful-Booker",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "43146357",
		"_collection_link": "https://restless-comet-889251.postman.co/workspace/Restful-Booker-API~7d705606-e68d-4a5a-9bd6-6f4c163b52fa/collection/43146357-528edb9b-d04b-4187-8f85-4f8bcfeb5061?action=share&source=collection_link&creator=43146357"
	},
	"item": [
		{
			"name": "Create Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var statuscode = pm.response.code;\r",
							"console.log(statuscode);\r",
							"\r",
							"if (statuscode === 200) {\r",
							"    var jsonData = pm.response.json()\r",
							"pm.environment.set(\"id\", jsonData.bookingid)\r",
							"    pm.test(\"Request successful - 200 OK\");\r",
							"} \r",
							"else if (statuscode === 201) {\r",
							"    pm.test(\"Resource created successfully - 201 Created\");\r",
							"} \r",
							"else if (statuscode === 204) {\r",
							"    pm.test(\"Request successful, no content returned - 204 No Content\");\r",
							"} \r",
							"else if (statuscode === 301) {\r",
							"    pm.test(\"Resource moved permanently - 301 Moved Permanently\");\r",
							"} \r",
							"else if (statuscode === 302) {\r",
							"    pm.test(\"Resource found at a different location - 302 Found\");\r",
							"} \r",
							"else if (statuscode === 304) {\r",
							"    pm.test(\"Resource not modified, use cache - 304 Not Modified\");\r",
							"} \r",
							"else if (statuscode === 400) {\r",
							"    pm.test(\"Bad Request - Check the request parameters - 400 Bad Request\");\r",
							"} \r",
							"else if (statuscode === 401) {\r",
							"    pm.test(\"Unauthorized - Authentication is required - 401 Unauthorized\");\r",
							"} \r",
							"else if (statuscode === 403) {\r",
							"    pm.test(\"Forbidden - You don't have permission - 403 Forbidden\");\r",
							"} \r",
							"else if (statuscode === 404) {\r",
							"    pm.test(\"Resource not found - Check the endpoint - 404 Not Found\");\r",
							"} \r",
							"else if (statuscode === 405) {\r",
							"    pm.test(\"Method not allowed - Verify HTTP method - 405 Method Not Allowed\");\r",
							"} \r",
							"else if (statuscode === 429) {\r",
							"    pm.test(\"Too many requests - Rate limit exceeded - 429 Too Many Requests\");\r",
							"} \r",
							"else if (statuscode === 500) {\r",
							"    pm.test(\"Internal server error - Issue with API server - 500 Internal Server Error\");\r",
							"} \r",
							"else if (statuscode === 502) {\r",
							"    pm.test(\"Bad gateway - Invalid response from upstream server - 502 Bad Gateway\");\r",
							"} \r",
							"else if (statuscode === 503) {\r",
							"    pm.test(\"Service unavailable - Server is down or overloaded - 503 Service Unavailable\");\r",
							"} \r",
							"else if (statuscode === 504) {\r",
							"    pm.test(\"Gateway timeout - Server took too long to respond - 504 Gateway Timeout\");\r",
							"} \r",
							"else {\r",
							"    pm.test(\"Unexpected status code received: \" + statuscode);\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var firstName = pm.variables.replaceIn(\"{{$randomFirstName}}\")\r",
							"pm.environment.set(\"firstName\",firstName)\r",
							"\r",
							"var lastName = pm.variables.replaceIn(\"{{$randomLastName}}\")\r",
							"pm.environment.set(\"lastName\",lastName)\r",
							"\r",
							"var totalPrice = pm.variables.replaceIn(\"{{$randomInt}}\")\r",
							"pm.environment.set(\"totalPrice\",totalPrice)\r",
							"\r",
							"var depositPaid = pm.variables.replaceIn(\"{{$randomBoolean}}\")\r",
							"pm.environment.set(\"depositPaid\",depositPaid)\r",
							"\r",
							"const moment = require('moment')\r",
							"const today = moment()\r",
							"\r",
							"var checkIn = today.add(5,'d').format('YYYY-MM-DD')\r",
							"pm.environment.set(\"checkIn\",checkIn)\r",
							"\r",
							"var checkOut = today.add(10,'d').format('YYYY-MM-DD')\r",
							"pm.environment.set(\"checkOut\",checkOut)\r",
							"\r",
							"var additionalNeeds = pm.variables.replaceIn(\"{{$randomProduct}}\")\r",
							"pm.environment.set(\"additionalNeeds\",additionalNeeds)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"firstname\" : \"{{firstName}}\",\r\n\t\"lastname\" : \"{{lastName}}\",\r\n\t\"totalprice\" : {{totalPrice}},\r\n\t\"depositpaid\" : {{depositPaid}},\r\n\t\"bookingdates\" : {\r\n    \t\"checkin\" : \"{{checkIn}}\",\r\n    \t\"checkout\" : \"{{checkOut}}\"\r\n\t},\r\n\t\"additionalneeds\" : \"{{additionalNeeds}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/booking/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var statuscode = pm.response.code;\r",
							"console.log(statuscode);\r",
							"\r",
							"if (statuscode === 200) {\r",
							"    var jsonData = pm.response.json()\r",
							"\r",
							"pm.test(\"First Name Validation\",function(){\r",
							"    pm.expect(jsonData.firstname).to.eql(pm.environment.get(\"firstName\"))\r",
							"})\r",
							"\r",
							"pm.test(\"Last Name Validation\",function(){\r",
							"    pm.expect(jsonData.lastname).to.eql(pm.environment.get(\"lastName\"))\r",
							"})\r",
							"\r",
							"pm.test(\"Total Price Validation\",function(){\r",
							"    pm.expect(jsonData.totalprice.toString()).to.eql(pm.environment.get(\"totalPrice\"))\r",
							"})\r",
							"\r",
							"pm.test(\"Deposit Paid Validation\",function(){\r",
							"    pm.expect(jsonData.depositpaid.toString()).to.eql(pm.environment.get(\"depositPaid\"))\r",
							"})\r",
							"\r",
							"pm.test(\"Check in Date Validation\",function(){\r",
							"    pm.expect(jsonData.bookingdates.checkin).to.eql(pm.environment.get(\"checkIn\"))\r",
							"})\r",
							"\r",
							"pm.test(\"Check Out Date Validation\",function(){\r",
							"    pm.expect(jsonData.bookingdates.checkout).to.eql(pm.environment.get(\"checkOut\"))\r",
							"})\r",
							"\r",
							"pm.test(\"Additional Needs Validation\",function(){\r",
							"    pm.expect(jsonData.additionalneeds).to.eql(pm.environment.get(\"additionalNeeds\"))\r",
							"})\r",
							"} \r",
							"else if (statuscode === 201) {\r",
							"    pm.test(\"Resource created successfully - 201 Created\");\r",
							"} \r",
							"else if (statuscode === 204) {\r",
							"    pm.test(\"Request successful, no content returned - 204 No Content\");\r",
							"} \r",
							"else if (statuscode === 301) {\r",
							"    pm.test(\"Resource moved permanently - 301 Moved Permanently\");\r",
							"} \r",
							"else if (statuscode === 302) {\r",
							"    pm.test(\"Resource found at a different location - 302 Found\");\r",
							"} \r",
							"else if (statuscode === 304) {\r",
							"    pm.test(\"Resource not modified, use cache - 304 Not Modified\");\r",
							"} \r",
							"else if (statuscode === 400) {\r",
							"    pm.test(\"Bad Request - Check the request parameters - 400 Bad Request\");\r",
							"} \r",
							"else if (statuscode === 401) {\r",
							"    pm.test(\"Unauthorized - Authentication is required - 401 Unauthorized\");\r",
							"} \r",
							"else if (statuscode === 403) {\r",
							"    pm.test(\"Forbidden - You don't have permission - 403 Forbidden\");\r",
							"} \r",
							"else if (statuscode === 404) {\r",
							"    pm.test(\"Resource not found - Check the endpoint - 404 Not Found\");\r",
							"} \r",
							"else if (statuscode === 405) {\r",
							"    pm.test(\"Method not allowed - Verify HTTP method - 405 Method Not Allowed\");\r",
							"} \r",
							"else if (statuscode === 429) {\r",
							"    pm.test(\"Too many requests - Rate limit exceeded - 429 Too Many Requests\");\r",
							"} \r",
							"else if (statuscode === 500) {\r",
							"    pm.test(\"Internal server error - Issue with API server - 500 Internal Server Error\");\r",
							"} \r",
							"else if (statuscode === 502) {\r",
							"    pm.test(\"Bad gateway - Invalid response from upstream server - 502 Bad Gateway\");\r",
							"} \r",
							"else if (statuscode === 503) {\r",
							"    pm.test(\"Service unavailable - Server is down or overloaded - 503 Service Unavailable\");\r",
							"} \r",
							"else if (statuscode === 504) {\r",
							"    pm.test(\"Gateway timeout - Server took too long to respond - 504 Gateway Timeout\");\r",
							"} \r",
							"else {\r",
							"    pm.test(\"Unexpected status code received: \" + statuscode);\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/booking/{{id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var statuscode = pm.response.code;\r",
							"console.log(statuscode);\r",
							"\r",
							"if (statuscode === 200) {\r",
							"    var jsonData = pm.response.json()\r",
							"    pm.environment.set(\"token\",jsonData.token)\r",
							"    pm.test(\"Request successful - 200 OK\");\r",
							"} \r",
							"else if (statuscode === 201) {\r",
							"    pm.test(\"Resource created successfully - 201 Created\");\r",
							"} \r",
							"else if (statuscode === 204) {\r",
							"    pm.test(\"Request successful, no content returned - 204 No Content\");\r",
							"} \r",
							"else if (statuscode === 301) {\r",
							"    pm.test(\"Resource moved permanently - 301 Moved Permanently\");\r",
							"} \r",
							"else if (statuscode === 302) {\r",
							"    pm.test(\"Resource found at a different location - 302 Found\");\r",
							"} \r",
							"else if (statuscode === 304) {\r",
							"    pm.test(\"Resource not modified, use cache - 304 Not Modified\");\r",
							"} \r",
							"else if (statuscode === 400) {\r",
							"    pm.test(\"Bad Request - Check the request parameters - 400 Bad Request\");\r",
							"} \r",
							"else if (statuscode === 401) {\r",
							"    pm.test(\"Unauthorized - Authentication is required - 401 Unauthorized\");\r",
							"} \r",
							"else if (statuscode === 403) {\r",
							"    pm.test(\"Forbidden - You don't have permission - 403 Forbidden\");\r",
							"} \r",
							"else if (statuscode === 404) {\r",
							"    pm.test(\"Resource not found - Check the endpoint - 404 Not Found\");\r",
							"} \r",
							"else if (statuscode === 405) {\r",
							"    pm.test(\"Method not allowed - Verify HTTP method - 405 Method Not Allowed\");\r",
							"} \r",
							"else if (statuscode === 429) {\r",
							"    pm.test(\"Too many requests - Rate limit exceeded - 429 Too Many Requests\");\r",
							"} \r",
							"else if (statuscode === 500) {\r",
							"    pm.test(\"Internal server error - Issue with API server - 500 Internal Server Error\");\r",
							"} \r",
							"else if (statuscode === 502) {\r",
							"    pm.test(\"Bad gateway - Invalid response from upstream server - 502 Bad Gateway\");\r",
							"} \r",
							"else if (statuscode === 503) {\r",
							"    pm.test(\"Service unavailable - Server is down or overloaded - 503 Service Unavailable\");\r",
							"} \r",
							"else if (statuscode === 504) {\r",
							"    pm.test(\"Gateway timeout - Server took too long to respond - 504 Gateway Timeout\");\r",
							"} \r",
							"else {\r",
							"    pm.test(\"Unexpected status code received: \" + statuscode);\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"username\": \"admin\",\r\n\t\"password\": \"password123\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/auth",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Booking",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var updatedFirstName = pm.variables.replaceIn(\"{{$randomFirstName}}\")\r",
							"pm.environment.set(\"updatedFirstName\",updatedFirstName)\r",
							"\r",
							"var updatedLastName = pm.variables.replaceIn(\"{{$randomLastName}}\")\r",
							"pm.environment.set(\"updatedLastName\",updatedLastName)\r",
							"\r",
							"var updatedTotalPrice = pm.variables.replaceIn(\"{{$randomInt}}\")\r",
							"pm.environment.set(\"updatedTotalPrice\",updatedTotalPrice)\r",
							"\r",
							"var updatedDepositPaid = pm.variables.replaceIn(\"{{$randomBoolean}}\")\r",
							"pm.environment.set(\"updatedDepositPaid\",updatedDepositPaid)\r",
							"\r",
							"const moment = require('moment')\r",
							"const today = moment()\r",
							"\r",
							"var updatedCheckIn = today.add(5,'d').format('YYYY-MM-DD')\r",
							"pm.environment.set(\"updatedCheckIn\",updatedCheckIn)\r",
							"\r",
							"var updatedCheckOut = today.add(10,'d').format('YYYY-MM-DD')\r",
							"pm.environment.set(\"updatedCheckOut\",updatedCheckOut)\r",
							"\r",
							"var updatedAdditionalNeeds = pm.variables.replaceIn(\"{{$randomProduct}}\")\r",
							"pm.environment.set(\"updatedAdditionalNeeds\",updatedAdditionalNeeds)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var statuscode = pm.response.code;\r",
							"console.log(statuscode);\r",
							"\r",
							"if (statuscode === 200) {\r",
							"    pm.test(\"Request successful - 200 OK\");\r",
							"} \r",
							"else if (statuscode === 201) {\r",
							"    pm.test(\"Resource created successfully - 201 Created\");\r",
							"} \r",
							"else if (statuscode === 204) {\r",
							"    pm.test(\"Request successful, no content returned - 204 No Content\");\r",
							"} \r",
							"else if (statuscode === 301) {\r",
							"    pm.test(\"Resource moved permanently - 301 Moved Permanently\");\r",
							"} \r",
							"else if (statuscode === 302) {\r",
							"    pm.test(\"Resource found at a different location - 302 Found\");\r",
							"} \r",
							"else if (statuscode === 304) {\r",
							"    pm.test(\"Resource not modified, use cache - 304 Not Modified\");\r",
							"} \r",
							"else if (statuscode === 400) {\r",
							"    pm.test(\"Bad Request - Check the request parameters - 400 Bad Request\");\r",
							"} \r",
							"else if (statuscode === 401) {\r",
							"    pm.test(\"Unauthorized - Authentication is required - 401 Unauthorized\");\r",
							"} \r",
							"else if (statuscode === 403) {\r",
							"    pm.test(\"Forbidden - You don't have permission - 403 Forbidden\");\r",
							"} \r",
							"else if (statuscode === 404) {\r",
							"    pm.test(\"Resource not found - Check the endpoint - 404 Not Found\");\r",
							"} \r",
							"else if (statuscode === 405) {\r",
							"    pm.test(\"Method not allowed - Verify HTTP method - 405 Method Not Allowed\");\r",
							"} \r",
							"else if (statuscode === 429) {\r",
							"    pm.test(\"Too many requests - Rate limit exceeded - 429 Too Many Requests\");\r",
							"} \r",
							"else if (statuscode === 500) {\r",
							"    pm.test(\"Internal server error - Issue with API server - 500 Internal Server Error\");\r",
							"} \r",
							"else if (statuscode === 502) {\r",
							"    pm.test(\"Bad gateway - Invalid response from upstream server - 502 Bad Gateway\");\r",
							"} \r",
							"else if (statuscode === 503) {\r",
							"    pm.test(\"Service unavailable - Server is down or overloaded - 503 Service Unavailable\");\r",
							"} \r",
							"else if (statuscode === 504) {\r",
							"    pm.test(\"Gateway timeout - Server took too long to respond - 504 Gateway Timeout\");\r",
							"} \r",
							"else {\r",
							"    pm.test(\"Unexpected status code received: \" + statuscode);\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"firstname\" : \"{{updatedFirstName}}\",\r\n\t\"lastname\" : \"{{updatedLastName}}\",\r\n\t\"totalprice\" : {{updatedTotalPrice}},\r\n\t\"depositpaid\" : {{updatedDepositPaid}},\r\n\t\"bookingdates\" : {\r\n    \t\"checkin\" : \"{{updatedCheckIn}}\",\r\n    \t\"checkout\" : \"{{updatedCheckOut}}\"\r\n\t},\r\n\t\"additionalneeds\" : \"{{updatedAdditionalNeeds}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/booking/{{id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Verify Update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var statuscode = pm.response.code;\r",
							"console.log(statuscode);\r",
							"\r",
							"if (statuscode === 200) {\r",
							"    var jsonData = pm.response.json()\r",
							"\r",
							"pm.test(\"First Name Update Validation\",function(){\r",
							"    pm.expect(jsonData.firstname).to.eql(pm.environment.get(\"updatedFirstName\"))\r",
							"})\r",
							"\r",
							"pm.test(\"Last Name Update Validation\",function(){\r",
							"    pm.expect(jsonData.lastname).to.eql(pm.environment.get(\"updatedLastName\"))\r",
							"})\r",
							"\r",
							"pm.test(\"Total Price Update Validation\",function(){\r",
							"    pm.expect(jsonData.totalprice.toString()).to.eql(pm.environment.get(\"updatedTotalPrice\"))\r",
							"})\r",
							"\r",
							"pm.test(\"Deposit Paid Update Validation\",function(){\r",
							"    pm.expect(jsonData.depositpaid.toString()).to.eql(pm.environment.get(\"updatedDepositPaid\"))\r",
							"})\r",
							"\r",
							"pm.test(\"Check in Date Update Validation\",function(){\r",
							"    pm.expect(jsonData.bookingdates.checkin).to.eql(pm.environment.get(\"updatedCheckIn\"))\r",
							"})\r",
							"\r",
							"pm.test(\"Check Out Date Update Validation\",function(){\r",
							"    pm.expect(jsonData.bookingdates.checkout).to.eql(pm.environment.get(\"updatedCheckOut\"))\r",
							"})\r",
							"\r",
							"pm.test(\"Additional Needs Update Validation\",function(){\r",
							"    pm.expect(jsonData.additionalneeds).to.eql(pm.environment.get(\"updatedAdditionalNeeds\"))\r",
							"})\r",
							"} \r",
							"else if (statuscode === 201) {\r",
							"    pm.test(\"Resource created successfully - 201 Created\");\r",
							"} \r",
							"else if (statuscode === 204) {\r",
							"    pm.test(\"Request successful, no content returned - 204 No Content\");\r",
							"} \r",
							"else if (statuscode === 301) {\r",
							"    pm.test(\"Resource moved permanently - 301 Moved Permanently\");\r",
							"} \r",
							"else if (statuscode === 302) {\r",
							"    pm.test(\"Resource found at a different location - 302 Found\");\r",
							"} \r",
							"else if (statuscode === 304) {\r",
							"    pm.test(\"Resource not modified, use cache - 304 Not Modified\");\r",
							"} \r",
							"else if (statuscode === 400) {\r",
							"    pm.test(\"Bad Request - Check the request parameters - 400 Bad Request\");\r",
							"} \r",
							"else if (statuscode === 401) {\r",
							"    pm.test(\"Unauthorized - Authentication is required - 401 Unauthorized\");\r",
							"} \r",
							"else if (statuscode === 403) {\r",
							"    pm.test(\"Forbidden - You don't have permission - 403 Forbidden\");\r",
							"} \r",
							"else if (statuscode === 404) {\r",
							"    pm.test(\"Resource not found - Check the endpoint - 404 Not Found\");\r",
							"} \r",
							"else if (statuscode === 405) {\r",
							"    pm.test(\"Method not allowed - Verify HTTP method - 405 Method Not Allowed\");\r",
							"} \r",
							"else if (statuscode === 429) {\r",
							"    pm.test(\"Too many requests - Rate limit exceeded - 429 Too Many Requests\");\r",
							"} \r",
							"else if (statuscode === 500) {\r",
							"    pm.test(\"Internal server error - Issue with API server - 500 Internal Server Error\");\r",
							"} \r",
							"else if (statuscode === 502) {\r",
							"    pm.test(\"Bad gateway - Invalid response from upstream server - 502 Bad Gateway\");\r",
							"} \r",
							"else if (statuscode === 503) {\r",
							"    pm.test(\"Service unavailable - Server is down or overloaded - 503 Service Unavailable\");\r",
							"} \r",
							"else if (statuscode === 504) {\r",
							"    pm.test(\"Gateway timeout - Server took too long to respond - 504 Gateway Timeout\");\r",
							"} \r",
							"else {\r",
							"    pm.test(\"Unexpected status code received: \" + statuscode);\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/booking/{{id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		}
	]
}